{"version":3,"sources":["/projects/nodejs/botbuilder/mongoose_record_replay/src/../src/getmodel.ts"],"names":[],"mappings":";;AACA,qCAAqC;AACrC,iEAAiE;AACjE,mCAAmC;AACnC,yCAAyC;AACzC,6CAAiE;AAEjE,IAAI,IAAI,GAAG,QAAQ,CAAC;AACpB,0BAA0B;AAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,4BAA4B,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;IACrE,IAAI,GAAG,QAAQ,CAAC;AAClB,CAAC;AACD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,4BAA4B,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IAClE,IAAI,GAAG,SAAS,CAAC;AACnB,CAAC;AAED,IAAI,MAAM,GAAG,SAAS,CAAC,6BAA6B,CAAC,CAAC,+CAA+C;AAErG,IAAI,YAAY,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,EACnE,MAAM,EAAE,mDAAmD;AAC3D,IAAI,CAAC,CAAC;AAER,IAAI,QAAQ,GAAG,SAAS,CAAC;AAEzB;;;;;GAKG;AACH;IACE,EAAE,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;QACtB,iBAAiB;QACjB,kDAAkD;QAClD,QAAQ,GAAG,QAAQ,IAAI,mBAAK,CAAC,2BAA2B,CAAC,YAAY,EACnE,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,6BAA6B,CAAC,CAAC;QAClE,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACD,MAAM,CAAC,mBAAK,CAAC,2BAA2B,CAAC,YAAY,EAAE,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;AACtG,CAAC;AATD,oCASC","file":"getmodel.js","sourcesContent":["\r\nimport * as mongoose from 'mongoose';\r\nimport * as mongoose_record_replay from 'mongoose_record_replay';\r\nimport * as process from 'process';\r\nimport * as Constants from './constants';\r\nimport { Model as Model, IFModel as IFModel } from 'mgnlq_model';\r\n\r\nvar mode = 'REPLAY';\r\n// MGNLQ_TESTMODEL2_REPLAY\r\nif (process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY] === \"RECORD\") {\r\n  mode = 'RECORD';\r\n}\r\nif (process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY] === \"OFF\") {\r\n  mode = undefined;\r\n}\r\n\r\nvar mypath = Constants.MONGOOSE_RECORD_REPLAY_FOLDER; // require().resolve('mgnlq_testmodel_replay');\r\n\r\nvar mongooseMock = mongoose_record_replay.instrumentMongoose(mongoose,\r\n  mypath, // 'node_modules/mgnlq_testmodel_replay/mgrecrep/',\r\n  mode);\r\n\r\nvar aPromise = undefined;\r\n\r\n/**\r\n * Obtain a model instance,\r\n *\r\n * note: the model must be closed via\r\n * Model.releaseModel(theModelInstance)\r\n */\r\nexport function getTestModel(): Promise<IFModel.IModels> {\r\n  if (mode === 'REPLAY') {\r\n    // determine mode\r\n    // in replax mode, using a singleton is sufficient\r\n    aPromise = aPromise || Model.loadModelsOpeningConnection(mongooseMock,\r\n      Constants.MONGO_DBURL, Constants.MONGOOSE_RECORD_REPLAY_FOLDER);\r\n    return aPromise;\r\n  }\r\n  return Model.loadModelsOpeningConnection(mongooseMock, Constants.MONGO_DBURL, Constants.MODEL_PATH);\r\n}"],"sourceRoot":"ABC"}